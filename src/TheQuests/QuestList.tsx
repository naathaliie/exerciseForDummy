/* Version 1
B√∂rja med att quests har id, beskrivning och en flagga f√∂r avklarad.

Vi ska ha ett antal of√§rdiga quests n√§r vi startar appen.

Man ska kunna toggla ett quest att vara avklarat eller inte. 
Det kan vara checkboxar man klickar i och ur, eller n√•gon annan design. 

Version 2
Man ska kunna l√§gga till nya quests i listan. L√§gg till ett inputf√§lt och en knapp.

Version 3
Man ska kunna redigera och ta bort befintliga quests. 
F√∂rslagsvis en Edit-knapp och Delete-knapp.*/

import "./QuestList.scss";
import { useRef, useState } from "react";
import { Quest, initialQuests } from "../types/questTypes";
import uuid from "react-uuid";
//Skapar en typ(struktur) f√∂r hur varje quest ska se ut(inneh√•lla)

const QuestList = () => {
  //F√∂r att visa upp alla initialQuests (quests) och f√∂r att kunna √§ndra (setQuest)
  const [quests, setQuest] = useState(initialQuests);
  const qNameRef = useRef<HTMLInputElement>(null);
  const qDescRef = useRef<HTMLInputElement>(null);
  //F√∂r att kkunna toggla mellan edit-mode och vanligt-mode
  const [editMode, setEditMode] = useState<null | string>(null);
  //F√∂r att s√§tta det valda questets namn som input
  const [editName, setEditName] = useState("");
  //F√∂r att s√§tta det valda questets beskrivning som input
  const [editDescription, setEditDescription] = useState("");

  console.log("Quests: ", quests);

  //Vad som h√§nder n√§r man klickar p√• "l√§gg till"
  const addQuestHandler = () => {
    //Kollar om inputf√§lten f√•tt ett v√§rde
    if (qNameRef.current?.value && qDescRef.current?.value) {
      //Skapar det nya questet
      const newQuest: Quest = {
        id: uuid(),
        name: qNameRef.current.value,
        description: qDescRef.current.value,
        complete: false,
      };
      //Anropar setQuests() och √∂ppnar upp arrayen quests och efter , l√§gger till det nya questet
      setQuest([...quests, newQuest]);
      qNameRef.current.value = "";
      qDescRef.current.value = "";
    }
  };

  //Vad som h√§nder n√§r man klickar p√• delete
  const deleteQuestHandler = (id: string) => {
    console.log("Det klickade id:t = ", id);
    //Ta bort det klickade questet
    const sortedQuests = quests.filter((q) => {
      return q.id !== id;
    });

    setQuest(sortedQuests);
  };

  //Vad som h√§nder n√§r man klickar p√• edit-knappen.
  const toggleEditMode = (id: string) => {
    //Om editMode √§r samma som id skall editMode bli som default, null
    if (editMode === id) {
      setEditMode(null);
    } // Annars skall editMode bli samma som id
    else {
      setEditMode(id);
      //Hitta det klickade questet
      const questToEdit = quests.find((q) => {
        return q.id === id;
      });
      //Om vi hittar det klickade questet s√•
      if (questToEdit) {
        setEditName(questToEdit.name);
        setEditDescription(questToEdit.description);
      }
    }
  };

  //Vad som h√§nder n√§r man klickar p√• spara i edit-l√§get
  const saveEditHandler = () => {
    //Skapar det nya questet
    const updatedQuest = quests.map((q) =>
      q.id === editMode
        ? { ...q, name: editName, description: editDescription }
        : q
    );
    setQuest(updatedQuest);
    setEditMode(null);
  };

  return (
    <div className="questListBox">
      <h1>The quests</h1>

      <section className="questSect">
        <section className="addQuestDiv">
          <p>Add new quest:</p>
          <label htmlFor="qName">Name</label>
          <input id="qName" type="text" ref={qNameRef} />
          <label htmlFor="qDesc">Description: </label>
          <input id="qDesc" type="text" ref={qDescRef} />
          <button onClick={addQuestHandler}>L√§gg till</button>
        </section>

        <section className="allQuestSect">
          <p>All the quests:</p>
          {quests.map((q) => {
            return (
              <ul key={q.id}>
                <li>
                  {editMode === q.id ? (
                    <input
                      type="text"
                      value={editName}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                        setEditName(e.target.value);
                      }}
                    />
                  ) : (
                    `Quest: ${q.name}`
                  )}
                </li>
                <li>
                  {editMode === q.id ? (
                    <input
                      type="text"
                      value={editDescription}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                        setEditDescription(e.target.value);
                      }}
                    />
                  ) : (
                    `Description: ${q.description}`
                  )}
                </li>
                {/* Span anv√§nds f√∂r att ge mer kontroll √∂ver utseendet (beh√•ller det precis som emojin ser ut) te.x en button hade √§ndrat p√• utseendet*/}
                <li>
                  Complete:{" "}
                  {q.complete ? (
                    <span
                      onClick={() => {
                        console.log("Du klickade p√• ibockad med id", q.id);
                        /* true ska bli false p√• det klickade questet */
                        setQuest(
                          quests.map((quest) => {
                            if (q.id === quest.id) {
                              return { ...q, complete: false };
                            } else {
                              return quest;
                            }
                          })
                        );
                      }}
                    >
                      ‚úÖ
                    </span>
                  ) : (
                    <span
                      onClick={() => {
                        /* false ska bli true p√• det klickade questet */
                        setQuest(
                          quests.map((quest) => {
                            if (q.id === quest.id) {
                              return { ...q, complete: true };
                            } else {
                              return quest;
                            }
                          })
                        );
                      }}
                    >
                      üü©
                    </span>
                  )}
                </li>
                <div className="button-box">
                  {editMode === q.id ? (
                    <button className="btn save" onClick={saveEditHandler}>
                      Spara
                    </button>
                  ) : (
                    <button
                      className="btn edit"
                      onClick={() => {
                        toggleEditMode(q.id);
                      }}
                    >
                      Redigera
                    </button>
                  )}
                  <button
                    className="btn delete"
                    onClick={() => {
                      deleteQuestHandler(q.id);
                    }}
                  >
                    Delete
                  </button>
                </div>
              </ul>
            );
          })}
        </section>
      </section>
    </div>
  );
};

export default QuestList;
